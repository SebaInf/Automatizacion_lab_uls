def load_waveforms(self,n_channel) -> dict:
		board.transfer()
		self.board.get_time(0,n_channel-1,self.board.get_trigger_cell()) # Not sure what this does, but it was in `drs_exam.cpp`.
		if num_channel==1:
			return {
				'Amplitude_1 (V)': np.array(self.board.get_waveform_buffer(n_channel-1))*1e-3,
				'Time (s)': np.array(self.board.get_time_buffer(n_channel-1))*1e-9,
				}
	
			}

def wait_trigger()	
	start=time.time()
	time.sleep(0.0001)
	finish=time.time()
	#print(finish-start)
	print('Waiting for trigger...')
	board.wait_for_single_trigger()
	print("signal received")





def get_data(channel="1",numero_tri="NULL",run_time="NULL",trigger_time="NULL"):
	chlist=[int(x) for x in channel.split(",")]
	#print(chlist)
	s=len(chlist)
	#print(s)
	#rint(time.time())
	
	load_data = {}
	
	

	fout=TFile("datafile.root","recreate")
	

	tupla=TNtuple("drs4data","drs4 data","evn:t:v0:v1:v2:v3" )
	
	
	temp2=time.time()

	if numero_tri != "NULL":
		temp1=numero_tri
		temp2=1
		i=temp2
	elif run_time != "NULL":
		temp1=run_time+time.time()
		temp2=time.time()
		i=temp2
		


	else:
		temp2=1
		temp1=temp2
		i=temp2
		
	while temp2<=temp1:
		if trigger_time!="NULL":
			temp4=time.time()
			temp5=temp4+trigger_time
		else:
			temp4=1
			temp5=2
		
		board.wait_trigger()

		#while temp4 <temp5 # poner menor
		
			board.transfer()
					#hacer tab a todo

			for chidx in chlist:
				t, v = load_waveforms(CH=chidx)
				if 'time' not in load_data.keys():
					load_data['time'] = t
				load_data[f'CH{chidx}'] = v


			if s==1:
				for t0, v0 in zip(t,load_data[f'CH{1}']):
					#print(t0)
					tupla.Fill(i,t0,v0)
			elif s==2:
				for t0, v0,v1 in zip(t,load_data[f'CH{1}'],load_data[f'CH{2}']):
					tupla.Fill(i,t0,v0,v1)
			elif s==3:
				for t0, v0,v1,v2 in zip(t,load_data[f'CH{1}'],load_data[f'CH{2}'],load_data[f'CH{3}']):
					tupla.Fill(i,t0,v0,v1,v2)
			else :
				for t0, v0,v1,v2,v3 in zip(t,load_data[f'CH{1}'],load_data[f'CH{2}'],load_data[f'CH{3}'],load_data[f'CH{4}']):
					tupla.Fill(i,t0,v0,v1,v2)



			if numero_tri != "NULL":
				temp2=temp2+1

			elif run_time != "NULL":
				temp2=time.time()
			else:
				temp2=temp2+1
			i=temp2

			if trigger_time != "NULL":
				temp4= time.time()
			else:
				temp4=2		

	fout.Write("",TObject.kOverwrite)
	fout.Close()
