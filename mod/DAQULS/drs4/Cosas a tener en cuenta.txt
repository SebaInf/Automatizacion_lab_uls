La biblioteca "pydrs" fue adaptada y se le agrego la funcion:

---------------------------------------------------------------------------------------------------------------------------------------------------
def get_waveform_all(self) -> dict:
		"""After the board has triggered you can use this method to access
		the data.
		
		Parameters
		----------
		n_channel: int
			Number of channel from which to get the data.
		
		Returns
		-------
		waveform_data: dict
			A dictionary of the form `{'Time (s)': np.array, 'Amplitude (V)': np.array}`
			containing the data.
		"""
		n_channel=1
		# I wrote this function following the example `drs_exam.cpp`.
		ct.check_is_instance(n_channel,'n_channel',int)
		if n_channel not in {1,2,3,4}:
			raise ValueError(f'`n_channel` must be one of 1,2,3 or 4, received {repr(n_channel)}.')
		self.board.get_time(0,n_channel-1,self.board.get_trigger_cell()) # Not sure what this does, but it was in `drs_exam.cpp`.
		return {
			'Amplitude_1 (V)': np.array(self.board.get_waveform_buffer(1-1))*1e-3,
			'Amplitude_2 (V)': np.array(self.board.get_waveform_buffer(2-1))*1e-3,
			'Amplitude_3 (V)': np.array(self.board.get_waveform_buffer(3-1))*1e-3,
			'Amplitude_4 (V)': np.array(self.board.get_waveform_buffer(4-1))*1e-3,
			'Time (s)': np.array(self.board.get_time_buffer(n_channel-1))*1e-9,
		}
---------------------------------------------------------------------------------------------------------------------------------------------------
En donde se toman los cuatros canales del drs4 al mismo tiempo y esto es asi puesto que una vez se invoca la funcion transfer_waves(self, firstChannel: int, lastChannel: int) (la cual esta en la biblioteca pydrs) los cuatro canales del drs4 son guardados en la memoria del pc y la linea de comandos 'Amplitude_1 (V)': np.array(self.board.get_waveform_buffer(1-1))*1e-3, lo unico que hace es guardarlos dentro de una variable con la cual python puede trabajar
  
  


Las funciones usadas por el wrapper original(osea sin esta funciones agregadas a la biblioteca) estan en "https://github.com/SengerM/pydrs"
y siendo importante mencionar que en /pydrs/pydrs/cpp y en /pydrs/pydrs/cpp/include estan todas las funciones que usa el drs4 para funcionar.
